import random

N = 1000
k = 15
t = 20
dna = ['TGGCATCTGTTACCTCTCGTACTGCCCGCGTAAGACTCGGGTGGCTCAGTGCAAGACCCGTTCTTAATTGCTGCCCGCCGAGGCTCCCAGACACGTGATTATCTACCGTCGTAGCGGTTAGATCGCATCCAACGACTCCCTTAATCAGAGTAATCGTTGAAGTAGCGTGGTCTTCAGGTCATGGCATCTGTTACCT',
'CTCGTACTGCCCGCGTAAGACTCGGGTGGCTCAGTGCAAGACCCGTTCTTAATTGCTGCCCGCCGAGGCTCCCAGACACGTGATGGAGACTGGACGTTTTATCTACCGTCGTAGCGGTTAGATCGCATCCAACGACTCCCTTAATCAGAGTAATCGTTGAAGTAGCGTGGTCTTCAGGTCATGGCATCTGTTACCT',
'GAGCCTGCTCCGTTCAGTATCGATAGGAGTTAAGGCAACGCCCTCATTCGTAAGCACGGGGCTTTACTTAGGATGAAAGTCGAGTGTTTACGGACCTAGCCGCAGTCATCTAGATTGCATTGGAGCAACGGTACGTTGGTAGACTGGCCAGTATGATAAGCGCAATGGTCTAATGACGTTTATGGTCCTAGGGTAT',
'CTTGACCTTTATTCGCGATATATCACCGACTCCAGCAAGAGCTCTGGCAATCTCGGAATGTTGCATCAGGTCCTGGCGTTGCAAACGCGCCGAGCCGGAAACCGTTTGGTGGCGCCCATCCCTGTCCGGTCGCGGCAATCAAACGTCCTCATATTACCCTAGTTCTGCGCCCACAGCCGTGGTTAATGGACGTTGA',
'GCCTCCTAATGCCGTTCTCCGCGAGGTTGACAACGTACCGGCACTTGACTTAGGATGAGCCGATAGGCCGTGTCTCTGGACGTACAAGGGGAGCAGTGGGAGCTAAATTGGTGAGTCAGCCTTCGGGTGCGGTAAGCTAGGTTGCTACATAGTACGACCAAGCCAGCCAGCGTCATTCCATGGAGGGGACGATATA',
'AGGATTCCGAGTGCCATCGATGGTCTCATTACGTTGTCATGGTAGTAACGCCCGCGGCGGCGTGGTAAGAACTGGGCTTACTGAAATGCGCAAGGTCAACTCTCGATTCCTTGCTTAAAGATCTGACATCCGCGCAAGATTAAGCGCATCAAGCTGTATCTTTCTGCCCGCATCTTAGGCCTTTCCGGCCGAGTTA',
'CCAAACCCTAGAAGTGGGTCCCGACGTCTTACTCGGCCTGGGGGCGTTTAACGATGGGGTGCTCCCAAGTAAAAATCGGAATTACCTATGGGAGGTACAAGGTCGTATGGGCTCAGCGGGCCTTGGGGGTCTCTGGACGGGTTGGCGTCTGAGGCCCCGGAGGCATGTGGGCAGCAGCCCATGTACCAAATCAATC',
'TGCCAGCCCAGCTACTGGTCAAGGGACGTTCAAGGCCCCAGAACAATGCTCTCGTGGTAACTACTCATCTTTTATATAAAATGGTTCGGTTAGGTAAAGTCGATCTGAATGCCTGAGACACACTACATCACTGTCCTTCAATGTTGATCCGCCTGTTTAGGCTACCATATCTTTGACGAAGCTCGTCAATCGGAAG',
'ACCCTAGGGGTACGCAAGTGGTCTAGCGACGTTCCGGTAGCGTAATCCACTCGCTTCATCGAAACGGTGTCCGCTCCGGCTGACAATCGAGGATAGCCGAGCCGAGTAGACGGCGGATTTCATTCGGATGGTGGATTCGACACGCATTAGGACGTAAGTTGGGGGCACAGGAATTACTATCATCTTGCCCCCATAC',
'ACACAGTACCACGACACATCGTAACATCTAGATTTGTGCCATCTGGACGTTGGGTCAGGTTGCCAAAGTGTCATTATGGCGCCGTGACACTCCATTGTTCGCCCGAAAGGCACGGACCATTTCAAAACAAGAGAGTTACACAGTACGTATGGGCAAACGCGAAAGAAATATGCAAGTACCCCTCCATTTACAGTTC',
'CCTAAGGGATCATGTCGATCTTCACCCACCCCCCAAATGCGAGCCCACTGGCTCTTGCCGGGGGGTAATTTAAAGGATCTATAACTGCCGGGGCCACTCCGTCTGGCGTGACACTTCGCTGGTCTCTGGAGACTACCCTGGATCCTGCCAGGCCAGAAATGGTCGACATAGGCAGCCAGCTCGTGCAGCCATGGCT',
'GCAGGTTCAAACGAGAGGCTGTTGACATGGTTAAGGATCGCCGTATTATGATAATACGGAATAGTTTAAGCAGGGCATCTCATCACGGCGATGGGACTATTGGTCTCTGACTGTTGGAGGCAGAGCAGGTAAGTGCTATCAACTATGAAGAGCAGAATGGCTCTACTTATCCTGGAATTGCACGTCTTCAGGCGTT',
'TGCAAACCAACAAATTTGCTCTGGACGTTAACTCCAGATTGCGTATCTGTGTGGGCGAGTACCGTTTCATTTCCCAACCCACAATCCTGACGGCTCCCACCGCACCGGTTTGCGTAAATTCTCCACACTTTCGCAAACAACTTCTCGAGTTTTACGACGGAACGACAGCAATCGTATCGCGAAGGTAATTCGGGGC',
'CACGTTTAGACATGTTTCTAGTACTTGTAGAGCGTTTCCATATATGGTGTCAGATTTAGCCTACTCGAGGTCCGTATAAGGCTGGTACACCAATTCTCTGATCAATATGAATTGGTCTCTGGTTTTTTCCCTCCACGGGGCGCGTTCGTGCACGTGGGCCCTGAGGTGGTTCCCGGCGCATGCGCCATTCGGCACG',
'GTCTGGCCGCTCATACTGTTTGCCTATGTTGGTGAGAGATCGTGGTCAATAGCACCAATGCAGGGCCGACCCACCTCTCTGGACGTTGAGGCGGCAGGAGCCACGTAAGGGGATCCGAACTCAGCCCGTCAAAAGCAGAGGCCTTGCGAGAACTGTGGGCTTGAAAACCCCATGGAGTAACCTGTATTCCACCGGC',
'AGACAAGCGGTTGCGGCACGTATGAGGGTATCGACTACCACGATTATGACATGCCATTATCTATGCGTGTACACTACGTGAACTCAGCATCAGGATCATTCCGCCCTCTTTTCACATGAGCATTACGGAACGAACTCCGACAACAGGTTGGTCCTGGTCGAGGGACGTTGTGTTGATCCCTGCATGATTCAATCCT',
'CAAAGTGCCCACAACGCTTATCATGGTCTCTGGACCGCGCTGCCGATAAACTGAGTCAGACTAGGCATCGTGACACCAGAAGAGGTGGGGGAAAAGGCCAGAAGGAAGCCCGGCCTACACGCCGCGAGCTTCGGAGTCGCTGCCCTTGACTGAACCTACGCGTAGAGGTAAGAGTTGTTTGAGTGCGCTTATACCG',
'GCTAGGCGTATATTGCCTGGCCTGTAGCTACGAGGGAGGTTTGTGTCTGATGCGTCAAGCCATTCTAGCCAAGTAGTAATTAGGTCTTTGCAGCTTCGGCACATTCGGCAGTATGCTAGTTTGAAAGGACCTGGTTCTTGGACGTTGATGTCGATCCGGAAGCCGAGTTGCACAAGTGGTAAGGTAATGATACAGC',
'GGTCCGATCCCACCCTGCCGTGATTAATTAGAAACACTTACTGCACGGTTTCCTGTGCGTCGATGGTGGTCTCTTATCGTTATTCTGTATGTGTTCACCGCGTTTGGATTTACCCACGTTCTCAGCACTGGTCTGCCATGCACTCCGCGCCGTAAGCTTTTGGTCCACTGCGAGATCTGAGGCGTAGATGAGATAC',
'GTGCTAGACATCACTGCCCTCGGACACACAACTGCTACATCTTGAGCCGCTGTACGTTATATATGACGCACGAGCGGAACGTATGCTATAGCAAAAAATTACAGCGACTCATTCAGTAATCTTGTTCCACCTTGGCTAACGATGATATATTAGGCATTGGGGGCTGGACGTTTGAACTTGGTGGATTTGGAGGACT']

def Runner():
    maxScore = -1
    maxIteration = []
    for i in range(N):
        print("Running at: ", i)
        currIteration, currScore = RandomizedMotifSearch(dna, k, t)
        if currScore > maxScore:
            maxScore = currScore
            maxIteration = currIteration
    return maxIteration

def RandomizedMotifSearch(dna, k, t):

    #Generate Random Motifs
    motifs = []
    for motif in dna:
        randStart = min(int (random.random() * len(dna[0])), len(dna[0])-k)
        motifs.append(motif[randStart:randStart+k])
    bestMotifs = motifs
    counter = 0
    while(True):
        counter+=1
        profile = Profiler(motifs)
        motifs = ReturnProfileMostProbableKMERs(profile, dna, k)
        
        bestScore = ScoreMotifs(bestMotifs, profile)
        motifScore = ScoreMotifs(motifs, profile)

        #print(motifs, motifScore)
        #print(profile)

      #  if counter == 50:
       #     return bestMotifs, bestScore
        
        if motifScore > bestScore:
            bestMotifs = motifs
        else:
            return bestMotifs, bestScore


def Profiler(motifs):
    profile = dict()

    k = len(motifs[0])
    t = len(motifs)
    profile['A'] = [1 for _ in range(k)]
    profile['C'] = [1 for _ in range(k)]
    profile['G'] = [1 for _ in range(k)]
    profile['T'] = [1 for _ in range(k)]

    for i in range(t):
        for j in range(k):
            profile[motifs[i][j]][j] += 1

    for key in profile:
        for i in range(k):
            profile[key][i] = profile[key][i] / (t+4)


    return profile

def ScoreMotifs(motifs, profile):
    sumMotif = 0.0
    for motif in motifs:
        sumMotif += Score(motif, profile)
        """for char in range(len(motif)):
            if motif[char] == "A":
                sumMotif += profile['A'][char]
            if motif[char] == "C":
                sumMotif += profile['C'][char]
            if motif[char] == "T":
                sumMotif += profile['T'][char]
            if motif[char] == "G":
                sumMotif += profile['G'][char]"""
    return sumMotif  

def Score(string, profile):
    product = 1
    for i in range(len(string)):
        if string[i] == "A":
            product *= profile['A'][i]
        if string[i] == "C":
            product *= profile['C'][i]
        if string[i] == "T":
            product *= profile['T'][i]
        if string[i] == "G":
            product *= profile['G'][i]
    return product

def ReturnProfileMostProbableKMERs(profile, dna, k):
    totalReturns = []
    for string in dna:
        stringMax = 0
        mostLikely = ""
        for i in range(len(string) - k + 1):
            currString = string[i: i+k]
            stringScore = Score(currString, profile)
            if stringScore >= stringMax:
                stringMax = stringScore
                mostLikely = currString

        totalReturns.append(mostLikely)

        
    return totalReturns
    

def main():
    answer = Runner()
    for x in answer:
        print(x)

main()




